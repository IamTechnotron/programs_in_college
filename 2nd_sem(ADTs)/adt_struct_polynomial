#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define max 50

/*
 * This program works with two input polynomials.
 * Polynomials are sorted as increasing order of their power/exponent. (using a Bubble Sort algo.)
 * It can add two polynomials
 * It can multiply two polynomials
 * can evaluate the value of the function, for a given value of 'x'
 */

typedef struct term
{
    int exp;
    float coef;
}term;

typedef struct polynomial
{
    term item[max];
    int len;
}poly;

void init(poly *);
void create(poly *);
void sort(poly *);
void display(poly *);
int evaluate(poly *, int, int *);
int add(poly *, poly *, poly *);
int multiply(poly *, poly *, poly *);

void init(poly *p)
{
    p->len = 0;
}

void create(poly *p)
{
    int i;
    printf("Enter the size: ");
    scanf("%d",&p->len);
    for(i=0; i<p->len; i++)
    {
        printf("Enter %d th exponent: ",i+1);
        scanf("%d",&p->item[i].exp);
        printf("Enter %d th Coefficient: ",i+1);
        scanf("%f",&p->item[i].coef);
    }
}

void sort(poly *p)
{
    int i, j, len;
    term temp;
    len = p->len;
    for (i = 0; i < len - 1; i ++)
    {
        for (j = 0; j < len - (i + 1); j++)
        {   if (p->item[j].exp > p->item[j + 1].exp)
            {
                // Swap the two
                temp = p->item[j];
                p->item[j] = p->item[j+1];
                p->item[j +1] = temp;
            }
        }
    }
 }

void display(poly *p)
{
    int i;
    printf("\n");
    if(p->len == 0)
    {
        printf("\nERROR : EMPTY POLYNOMIAL!\n-Nothing to show");
    }
    else
    {
        for(i = 0; i < p->len; i ++)
        {
            if(i == 0)                                                   /* Printing 1st element and printing with-out '+'*/
            {
                if(p->item[i].exp == 0)                                    // Printing when exponent is zero
                {
                    if(p->item[i].coef > 0)
                        printf(" %0.1f ",p->item[i].coef);
                    else
                        printf(" - %0.1f ",-p->item[i].coef);
                }
                else if(p->item[i].exp == 1)                                // Printing when exponent is one
                {
                    if(p->item[i].coef > 0)
                        printf(" %0.1fx ",p->item[i].coef);
                    else
                        printf(" - %0.1fx ",-p->item[i].coef);
                }

                else if(p->item[i].exp < 0)                                // Printing when exponent negative
                {
                    if(p->item[i].coef > 0)
                        printf(" %0.1fx^(%d) ",p->item[i].coef, p->item[i].exp);
                    else
                        printf(" - %0.1fx^(%d) ",-p->item[i].coef, p->item[i].exp);
                }

                else
                {
                    if(p->item[i].coef > 1)
                    printf(" %0.1fx^%d ",p->item[i].coef, p->item[i].exp);
                    else
                    printf(" - %0.1fx^%d ",-p->item[i].coef, p->item[i].exp);
                }
            }

            else if(p->item[i].exp == 1)                                    /* Printing when exponent is one*/
            {
                if(p->item[i].coef > 0)
                    printf("+ %0.1fx ",p->item[i].coef);
                else
                    printf("- %0.1fx ",-p->item[i].coef);
            }

            else if(p->item[i].exp < 0)                                    /* Printing when exponent Negative*/
            {
                if(p->item[i].coef > 0)
                    printf("+ %0.1fx^(%d) ",p->item[i].coef, p->item[i].exp);
                else
                    printf("- %0.1fx^(%d) ",-p->item[i].coef, p->item[i].exp);
            }

            else
            {
                if(p->item[i].coef > 0)
                    printf("+ %0.1fx^%d ",p->item[i].coef, p->item[i].exp);
                else
                    printf("- %0.1fx^%d ",-p->item[i].coef, p->item[i].exp);
            }
        }
        printf("\n\n");
    }
}

int evaluate(poly *p, int x, int *result)
{
    int i;
    *result = 0;
    if(p->len == 0)
        return 0;
    for(i = 0; i < p->len; i ++)
        *result = *result + (p->item[i].coef * pow(x, p->item[i].exp));
    return 1;
}

int add(poly *p1, poly *p2, poly *p)
{
    int i = 0, j = 0, k = 0, len1, len2, m;
    len1 = p1->len;
    len2 = p2->len;
    while(i != len1 || j != len2)
    {
        if(i == len1 && j < len2)                           // List 1 exhausted -> copy rest of list 2
        {
            for(m = j; m < len2; m++)
            {
                p->item[k].coef = p2->item[m].coef;
                p->item[k].exp = p2->item[m].exp;
                k++;

            }
           j = m;
           break;
        }
        else if(j == len2 && i < len1)                      // List 2 exhausted -> copy rest of list 1
        {
            for(m = i; m < len1; m ++)
            {
                p->item[k].coef = p1->item[m].coef;
                p->item[k].exp = p1->item[m].exp;
                k++;
            }
            i = m;
            break;
        }
        else if(p1->item[i].exp == p2->item[j].exp)
        {
            p->item[k].coef = p1->item[i].coef + p2->item[j].coef;
            p->item[k].exp = p1->item[i].exp;
            i ++;
            j ++;
            if (p->item[k].coef == 0)
                continue;
            k ++;
        }
        else if (p1->item[i].exp > p2->item[j].exp)
        {
            p->item[k].coef = p2->item[j].coef;
            p->item[k].exp = p2->item[j].exp;
            j ++;
            if (p->item[k].coef == 0)
                continue;
            k ++;
        }
        else if (p1->item[i].exp < p2->item[j].exp)
        {
            p->item[k].coef = p1->item[i].coef;
            p->item[k].exp = p1->item[i].exp;
            i ++;
            if (p->item[k].coef == 0)
                continue;
            k ++;
        }
    }

    p->len = k;
    if(p->len == 0)
        return 0;
    return 1;
}

int multiply(poly *p1, poly *p2, poly *p)
{
    poly temp;
    int i = 0, j = 0, k = 0, len1, len2;
    len1 = p1->len;
    len2 = p2->len;

    // performing step 1 : Simple multiplication of each term.
    for(i = 0; i < len1; i ++)
    {
        for(j = 0; j < len2; j ++)
        {
            if(p1->item[i].exp >= 0 && p1->item[j].exp >= 0)
            {
                temp.item[k].coef = p1->item[i].coef * p2->item[j].coef;
            }
            else
            {
                if(p1->item[i].exp < 0 && p1->item[i].exp >= 0)
                {
                    temp.item[k].coef = p2->item[j].coef / p1->item[i].coef;
                }
                else if(p1->item[j].exp >= 0 && p1->item[i].exp < 0)
                {
                    temp.item[k].coef = p1->item[i].coef / p2->item[j].coef;
                }
                else
                {
                    temp.item[k].coef = p1->item[i].coef * p2->item[j].coef;
                }
            }
            temp.item[k].exp = p1->item[i].exp + p2->item[j].exp;
            if(temp.item[k].coef == 0)
                continue;
            k ++;
        }
    }

    temp.len = k;
    if(temp.len == 0)
        return 0;                           // Exit if step 1 was unsuccessful.
    k = 0;

    // Adding the common exponent terms.
    if(temp.len == 1)
    {
        p->item[k].coef = temp.item[i].coef;
        p->item[k].exp = temp.item[i].exp;
        k ++;
    }
    else
    {
        for(i = 0; i < temp.len; i ++)
        {
            if(temp.item[i].coef == 0)
                continue;
            p->item[k].coef = temp.item[i].coef;
            p->item[k].exp = temp.item[i].exp;

            for(j = i + 1; j < temp.len; j ++)
            {
                if(temp.item[i].exp == temp.item[j].exp)
                {
                    p->item[k].coef = p->item[k].coef + temp.item[j].coef;
                    temp.item[j].coef = 0;
                }
            }
            if(p->item[k].coef == 0)
                continue;
            k ++;
        }
    }

    p->len = k;
    if(p->len == 0)
        return 0;
    sort(p);
    return 1;
}


int main()
{
    int ch, result, flag, in, x;
    poly p, p1, p2;
    init(&p);
    init(&p1);
    init(&p2);
    printf("\t\t\tWELCOME TO POLYNOMIAL CALCULATING SYSTEM (P.C.S.)\n");
    while(1)
    {
        printf("\n-- Choose from the menu --\n");
        printf("\n1. Create the polynomials\n2. Display the Polynomial\n3. Evaluate a value of f(x) for a value of x\n4. Add Two Polynomials\n5. Multiply Two Polynomials \n6. Exit\n>>> ");
        scanf("%d",&ch);
        switch (ch)
        {
            case 1  :   printf("\t-- Create --\n\n");
                        printf("Please enter the values of 1st polynomial -\n");
                        create(&p1);
                        printf("You entered:\n");
                        display(&p1);
                        printf("Please enter the values of 2nd polynomial\n[ Give size 0 if you want to skip! ]\n");
                        create(&p2);
                        if(p2.len == 0)
                            break;
                        printf("You entered:\n");
                        display(&p2);
                        break;

            case 2  :   printf("\t-- Display --\n");
                        if(p1.len > 0)
                        {
                            printf("> 1st Polynomial -\n");
                            display(&p1);
                        }
                        if(p2.len > 0)
                        {
                            printf("> 2nd Polynomial -\n");
                            display(&p2);
                        }
                        if(p.len > 0)
                        {
                            printf("> Resultant Polynomial -\n");
                            display(&p);
                        }

                        break;

             case 3  :  printf("\t-- Evaluation --\n\n");
                        printf("Enter the value of x: "); scanf("%d",&x);
                        printf("Which polynomial do you want to evaluate? (1 or 2): "); scanf("%d",&in);
                        if(in == 1)
                        {
                            flag = (evaluate(&p1, x, &result));
                        }
                        else if (in == 2)
                        {
                            flag = (evaluate(&p2, x, &result));
                        }
                        else
                        {
                            printf("ERROR : No such polynomial in memory...\n");
                            break;
                        }
                        if(flag)
                            printf("RESULT is %d",result);
                        else
                            printf("ERROR : Evaluation could not be completed!\n");
                        break;

            case 4  :   printf("\t-- Addition --\n\n");
                        if(add(&p1, &p2, &p))
                        {
                            printf("Sum is:\n");
                            display(&p);
                        }
                        else
                        {
                            printf("ERROR : Summation could not be completed!\n");
                        }
                        break;

           case 5  :   printf("\t-- Multiplication --\n\n");
                        if(multiply(&p1, &p2, &p))
                        {
                            printf("Product is:\n");
                            display(&p);
                        }
                        else
                        {
                            printf("ERROR : Multiplication could not be completed!\n");
                        }
                        break;

            case 6  :   printf("\nExiting...\n");
                        exit(0);
                        break;

            default :   printf("ERROR : WRONG CHOICE !\nPlease choose between given choices !");
        }
        printf("\n*************************************************************************");
    }
    return 0;
}
